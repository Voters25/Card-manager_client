{"version":3,"sources":["Components/CardsList/CardElement/CardElement.module.css","Components/Card/CardEdit.module.css","Components/CardsList/CardList.module.css","Components/NavBar/NavBar.jsx","history.js","Redux/cardEdit-reducer.js","Redux/cardList-reducer.js","Redux/userForm-reducer.js","Components/NavBar/NavBarContainer.jsx","Components/CardsList/CardElement/CardElement.jsx","Components/CardsList/TagElement/TagElement.jsx","Components/CardsList/CardList.jsx","Components/CardsList/CardListContainer.jsx","Components/Card/CardEdit.jsx","Components/Card/CardEditContainer.jsx","Components/UserForm/LogIn.jsx","Components/UserForm/LogInContainer.jsx","Components/UserForm/Registration/Registration.jsx","Components/UserForm/Registration/RegistrationContainer.jsx","App.js","serviceWorker.js","Redux/redux.js","index.js"],"names":["module","exports","NavBar","this","props","haveAUser","userName","getAllCards","getAllCard","getLogInPage","getLogPage","logOut","onLogOut","Navbar","collapseOnSelect","style","background","Container","className","NavbarCollapse","id","Fragment","Button","onClick","variant","display","React","Component","createBrowserHistory","initialState","cardTitle","cardText","cardTag","cardDate","editMode","thisCreatePage","cardId","postCardStarted","type","callForwardingToList","history","push","zeroingCardId","newId","cardEditReducer","state","action","newText","newTitle","newTag","newDate","newModeValue","newAnswer","cardList","tagList","getList","dispatch","getListStarted","fetch","credentials","then","res","json","result","changeList","catch","err","console","log","getCardStarted","deleteCard","text","reloadComponent","callForwardingToCard","newTags","newList","reverse","cardListReducer","localStorage","getItem","email","password","passwordTwo","callForwardingToLogIn","pushLoginToState","newName","removeUserName","changeEmail","newEmail","changePassword","newPassword","zeroingFormWithoutEmail","newPasswordTwo","zeroingForm","userFormReducer","NavBarContainer","connect","userForm","undefined","error","setItem","removeItem","CardElement","tag","date","getCardsWithTag","getCardListWithTag","Card","width","height","color","key","Body","Title","title","Subtitle","Text","classes","content","openThisCard","deleteThisCard","btn","TagElement","CardList","getCardList","a","newCard","createNewCard","tagElements","map","e","Math","random","toString","cardElements","_id","Content","Tag","Date","Row","Col","Test","md","overflow","CardListContainer","changeCardContent","changeCardId","getCard","getListWithByTag","CardEdit","newTitleElement","createRef","onChangeCardTitle","current","value","changeCardTitle","newTextElement","onChangeCardText","changeCardText","newTagElement","onChangeCardTag","changeCardTag","editCard","onEditCard","saveCard","postFormContent","saveThisCardChanges","saveNewCard","deleteNewCard","Form","FormGroup","FormControl","onChange","ref","aria-describedby","textForm","size","htmlSize","as","rows","styles","placeholder","button","CardEditContainer","cardEdit","updateNewCardText","updateNewCardTitle","updateNewCardTag","toLocaleString","formData","FormData","append","method","body","saveCardChanges","createCard","LogIn","emailFormElement","passwordFormElement","changeEmailValue","changePasswordValue","sendForm","sendUserForm","getRegistrationPage","getRegPage","xs","lg","xl","Group","controlId","sm","Label","Control","LogInContainer","sendLogInForm","Registration","passwordTwoFormElement","changePasswordTwo","changePasswordTwolValue","RegistrationContainer","sendRegistrationForm","App","fluid","exact","path","component","from","to","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3d8827a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"CardElement_text__Re5UY\",\"btn\":\"CardElement_btn__YhyGy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Test\":\"CardEdit_Test__3hhRc\",\"button\":\"CardEdit_button__3PEnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Test\":\"CardList_Test__1iSRL\"};","import React from 'react'\r\nimport { Button, Navbar, Container } from 'react-bootstrap';\r\nimport NavbarCollapse from 'react-bootstrap/esm/NavbarCollapse';\r\n\r\n\r\n\r\nexport default class NavBar extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.haveAUser();\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let userName = this.props.userName;\r\n        \r\n\r\n        this.getAllCards = () => {\r\n            this.props.getAllCard();\r\n        }\r\n        this.getLogInPage = () => {\r\n            this.props.getLogPage();\r\n        }\r\n        this.logOut = () => {\r\n            this.props.onLogOut();\r\n        }\r\n\r\n\r\n            //  ЕСЛИ ЗАЛОГИНЕН => ЕСТЬ КНОПКА ПОЛУЧИТЬ ЛИСТ\r\n            //  ТА ЖЕ ТЕМА С LOG OUT\r\n\r\n        return (\r\n\r\n            <Navbar collapseOnSelect /* expand=\"md\" - бургер-меню */ style={{ background: '#ff9800' }} >\r\n                <Container className=\"flex-nowrap\" >\r\n                    {/* <NavbarToggle className=\"mr-md-3 \" aria-controls=\"responsive-navbar-nav\" /> */}\r\n                    <NavbarCollapse id=\"responsive-navbar-nav\" >\r\n                        {userName ?\r\n                        <React.Fragment>\r\n                            <Button onClick={this.logOut} variant=\"outline-dark\" className=\"mr-md-3 mr-sm-2 mr-2\">Log Out</Button>\r\n                            <Button onClick={this.getAllCards} variant=\"outline-dark\" className=\"mr-md-3 mr-sm-2 mr-2\">All cards</Button>\r\n                            <h5 className=\"ml-auto d-none d-sm-inline\" style={{ display: 'inline-block' }}>{userName}</h5>\r\n                        </React.Fragment>\r\n                        :\r\n                            <Button onClick={this.getLogInPage} variant=\"outline-dark\" className=\"mr-3\">Log In</Button>\r\n                        }\r\n                        {/*<Button variant=\"outline-info\">Refresh</Button>*/}\r\n                    </NavbarCollapse>\r\n                </Container>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n<Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\" >\r\n                <Container>\r\n                    <NavbarToggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <NavbarCollapse id=\"responsive-navbar-nav\" >\r\n                        <Nav className=\"mr-auto\">\r\n\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                            <Button variant=\"outline-info\">Search</Button>\r\n                        </Form>\r\n                    </NavbarCollapse>\r\n                </Container>\r\n            </Navbar>\r\n\r\n*/","import { createBrowserHistory } from 'history';\r\n\r\n\r\n// Для переадресации  history.push('/...')\r\nexport default createBrowserHistory();","import history from \"../history\";\r\n\r\nconst POST_STARTED = 'POST-STARTED';\r\nconst CHANGE_CARD_TITLE = 'CHANGE-CARD-TITLE';\r\nconst CHANGE_CARD_TEXT = 'CHANGE-CARD-TEXT';\r\nconst CHANGE_CARD_CONTENT = 'CHANGE-CARD-CONTENT';\r\nconst CHANGE_EDIT_MODE = 'CHANGE-EDIT-MODE';\r\nconst CHANGE_THIS_CREATE_PAGE = 'CHANGE-THIS-CREATE-PAGE';\r\nconst CHANGE_CARD_ID = 'CHANGE-CARD-ID';\r\nconst CHANGE_CARD_TAG = 'CHANGE-CARD-TAG';\r\nconst CHANGE_CARD_DATE = 'CHANGE-CARD-DATE';\r\n\r\n\r\nconst initialState = {\r\n    cardTitle: '',\r\n    cardText: '',\r\n    cardTag: '',\r\n    cardDate: '',\r\n    editMode: false,\r\n    thisCreatePage: false,\r\n    cardId: ''\r\n}\r\n\r\nconst cardEditReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {\r\n\r\n    case CHANGE_CARD_TEXT:\r\n        return {\r\n             ...state,\r\n             cardText: action.newText\r\n        }\r\n    case CHANGE_CARD_TITLE:\r\n        return{\r\n            ...state,\r\n            cardTitle: action.newTitle\r\n        }\r\n    case CHANGE_CARD_CONTENT:\r\n        return {\r\n            ...state,\r\n            cardTitle: action.newTitle,\r\n            cardText: action.newText,\r\n            cardTag: action.newTag,\r\n            cardDate: action.newDate\r\n        }\r\n    case CHANGE_EDIT_MODE:\r\n        return {\r\n            ...state,\r\n            editMode: action.newModeValue\r\n        }\r\n    case CHANGE_THIS_CREATE_PAGE:\r\n        return {\r\n            ...state,\r\n            thisCreatePage: action.newAnswer\r\n        }\r\n    case CHANGE_CARD_ID:\r\n        return {\r\n            ...state,\r\n            cardId: action.newId\r\n        }\r\n    case CHANGE_CARD_TAG:\r\n        return {\r\n            ...state,\r\n            cardTag: action.newTag\r\n        }\r\n    case CHANGE_CARD_DATE:\r\n        return {\r\n            ...state,\r\n            cardDate: action.newDate\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n// Save Card Changes\r\n\r\nexport const saveCardChanges = (postFormContent) => {\r\n    return dispatch => {\r\n        dispatch(postCardStarted());\r\n\r\n        let date = new Date().toLocaleString();\r\n\r\n        let formData = new FormData();\r\n        formData.append('id', postFormContent.cardId);\r\n        formData.append('title', postFormContent.cardTitle);\r\n        formData.append('content', postFormContent.cardText);\r\n        formData.append('tag', postFormContent.cardTag);\r\n        formData.append('date', date);\r\n\r\n\r\n        fetch(`https://card-manager.herokuapp.com/edit`, {\r\n            method: 'POST',\r\n            credentials: \"include\",\r\n            body: formData\r\n        })\r\n            .then(res => res.text())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                dispatch(zeroingCardId());\r\n                callForwardingToList();\r\n                \r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\nconst postCardStarted = () => ({\r\n    type: POST_STARTED\r\n});\r\n\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n/*===================================================================================*/\r\n// Sve new Card \r\n\r\nexport const createCard = (postFormContent) => {\r\n    return dispatch => {\r\n        dispatch(postCardStarted());\r\n\r\n        let date = new Date().toLocaleString();\r\n\r\n        let formData = new FormData();\r\n        formData.append('title', postFormContent.cardTitle);\r\n        formData.append('content', postFormContent.cardText);\r\n        formData.append('tag', postFormContent.cardTag);\r\n        formData.append('date', date);\r\n\r\n\r\n        fetch('https://card-manager.herokuapp.com/create', {\r\n            method: 'POST',\r\n            credentials: \"include\",\r\n            body: formData\r\n        })\r\n            .then(res => res.text())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                callForwardingToList();\r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n\r\nexport const callForwardingToList = () => {\r\n    history.push('/list');\r\n}\r\n\r\n\r\n\r\nexport let changeCardContent = (result) => {\r\n    return {\r\n        type: 'CHANGE-CARD-CONTENT',\r\n        newTitle: result.Title,\r\n        newText: result.Content,\r\n        newTag: result.Tag,\r\n        newDate: result.Date\r\n    }\r\n}\r\n\r\nexport const zeroingCardContent = () => {\r\n    return {\r\n        type: 'CHANGE-CARD-CONTENT',\r\n        newTitle: '',\r\n        newText: '',\r\n        newTag: '',\r\n        newDate: ''\r\n    }\r\n}\r\n\r\nexport const createHints = () => {\r\n    return {\r\n        type: 'CHANGE-CARD-CONTENT',\r\n        newTitle: '   Title...',\r\n        newText: '   Text...',\r\n        newTag: ''\r\n    }\r\n}\r\n\r\nexport const editCard = () => {\r\n    return {\r\n        type: 'CHANGE-EDIT-MODE',\r\n        newModeValue: true\r\n    }\r\n}\r\nexport const switchOfEditCard = () => {\r\n    return {\r\n        type: 'CHANGE-EDIT-MODE',\r\n        newModeValue: false\r\n    }\r\n}\r\n\r\nexport const thisCreatePage = () => {\r\n    return {\r\n        type: 'CHANGE-THIS-CREATE-PAGE',\r\n        newAnswer: true\r\n    }\r\n}\r\nexport const thisEditPage = () => {\r\n    return {\r\n        type: 'CHANGE-THIS-CREATE-PAGE',\r\n        newAnswer: false\r\n    }\r\n}\r\n\r\nexport const changeCardId = (id) => {\r\n    return {\r\n        type: 'CHANGE-CARD-ID',\r\n        newId: id\r\n    }\r\n}\r\nexport const zeroingCardId = () => {\r\n    return {\r\n        type: 'CHANGE-CARD-ID',\r\n        newId: ''\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateNewCardTitle = (text) => {\r\n    return {\r\n        type: 'CHANGE-CARD-TITLE',\r\n        newTitle: text\r\n    }\r\n}\r\n\r\nexport const updateNewCardText = (text) => {\r\n    return {\r\n        type: 'CHANGE-CARD-TEXT',\r\n        newText: text\r\n    }\r\n}\r\n\r\nexport const updateNewCardTag = (tag) => {\r\n    return {\r\n        type: 'CHANGE-CARD-TAG',\r\n        newTag: tag\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default cardEditReducer;","import history from \"../history\";\r\nimport { changeCardContent, thisEditPage, changeCardId, switchOfEditCard, callForwardingToList } from './cardEdit-reducer'\r\n\r\nconst CHANGE_CARD_LIST = 'CHANGE-CARD-LIST';\r\nconst GET_STARTED = 'GET-STARTED';\r\nconst CHANGE_TAG_LIST = 'CHANGE-TAG-LIST';\r\nconst CHANGE_LIST = 'CHANGE-LIST';\r\n\r\n\r\nconst initialState = {\r\n    cardList: [],\r\n    tagList: []\r\n}\r\n\r\nconst cardListReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {\r\n\r\n    case CHANGE_CARD_LIST:\r\n        return {\r\n             ...state,\r\n             cardList: action.newList\r\n        }\r\n    case CHANGE_TAG_LIST:\r\n        return {\r\n            ...state,\r\n            tagList: action.newTags\r\n        }\r\n    case CHANGE_LIST:\r\n        return {\r\n            ...state,\r\n            tagList: action.newTags,\r\n            cardList: action.newList\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n\r\n/*===================================================================================*/\r\n// Get list\r\n\r\nexport const getList = () => {\r\n    return dispatch => {\r\n        dispatch(getListStarted());\r\n\r\n\r\n        fetch('https://card-manager.herokuapp.com/list', {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n\r\n                dispatch(changeList(result));\r\n                callForwardingToList();\r\n\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n}\r\n\r\nconst getListStarted = () => ({\r\n    type: GET_STARTED\r\n});\r\n\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n/*===================================================================================*/\r\n// Get cards list with tag\r\n\r\n\r\nexport const getListWithByTag = (tag) => {\r\n    return dispatch => {\r\n        dispatch(getListStarted());\r\n\r\n\r\n        fetch(`https://card-manager.herokuapp.com/byTag/${tag}`, {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n\r\n                dispatch(changeList(result));\r\n\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n}\r\n/*===================================================================================*/\r\n\r\n\r\n/*===================================================================================*/\r\n// Get Card\r\n\r\nexport const getCard = (id) => {\r\n    return dispatch => {\r\n        dispatch(getCardStarted());\r\n\r\n\r\n        fetch(`https://card-manager.herokuapp.com/card/${id}`, {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                dispatch(changeCardContent(result));\r\n                dispatch(thisEditPage());\r\n                dispatch(switchOfEditCard());\r\n                dispatch(changeCardId(id));\r\n                callForwardingToCard();\r\n\r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\nconst getCardStarted = () => ({\r\n    type: GET_STARTED\r\n});\r\n\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n\r\n/*===================================================================================*/\r\n// Delete Card\r\n\r\nexport const deleteCard = (id) => {\r\n    return dispatch => {\r\n        dispatch(getCardStarted());\r\n\r\n\r\n        fetch(`https://card-manager.herokuapp.com/delete/${id}`, {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.text())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                reloadComponent();\r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n\r\n\r\n\r\nexport const callForwardingToCard = () => {\r\n    history.push('/card');\r\n}\r\n\r\nconst reloadComponent = () => {\r\n    history.push('/1');\r\n    history.push('/list');\r\n}\r\n\r\n\r\n/* let changeCardList = (result) => {\r\n    console.log(result);\r\n    return {\r\n        type: 'CHANGE-CARD-LIST',\r\n        newList: result\r\n    }\r\n} */\r\n\r\n/* let changeTagList = (result) => {\r\n    console.log(result);\r\n    return {\r\n        type: 'CHANGE-TAG-LIST',\r\n        newTags: result\r\n    }\r\n} */\r\n\r\nlet changeList = (result) => {\r\n    return {\r\n        type: 'CHANGE-LIST',\r\n        newTags: result.tagList,\r\n        newList: result.cardList.reverse()\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default cardListReducer;","import history from \"../history\";\r\nimport { callForwardingToList } from \"./cardEdit-reducer\";\r\n\r\nconst CHANGE_USER_NAME = 'CHANGE-USER-NAME';\r\nconst CHANGE_EMAIL = 'CHANGE-EMAIL';\r\nconst CHANGE_PASSWORD = 'CHANGE-PASSWORD';\r\nconst CHANGE_PASSWORD_TWO = 'CHANGE-PASSWORD-TWO';\r\nconst CHANGE_FORM = 'CHANGE-FORM';\r\nconst CHANGE_FORM_WITHOUT_EMAIL = 'CHANGE-FORM-WITHOUT-EMAIL';\r\n\r\nconst initialState = {\r\n    userName: localStorage.getItem('user'),\r\n    email: '',\r\n    password: '',\r\n    passwordTwo: ''\r\n}\r\n\r\nconst userFormReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {\r\n\r\n        case CHANGE_USER_NAME:\r\n            return {\r\n                ...state,\r\n                userName: action.newName\r\n            }\r\n        case CHANGE_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.newEmail\r\n            }\r\n        case CHANGE_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.newPassword\r\n            }\r\n        case CHANGE_PASSWORD_TWO:\r\n            return {\r\n                ...state,\r\n                passwordTwo: action.newPasswordTwo\r\n            }\r\n        case CHANGE_FORM:\r\n            return {\r\n                ...state,\r\n                email: action.newEmail,\r\n                password: action.newPassword,\r\n                passwordTwo: action.newPasswordTwo\r\n            }\r\n        case CHANGE_FORM_WITHOUT_EMAIL:\r\n            return {\r\n                ...state,\r\n                password: action.newPassword,\r\n                passwordTwo: action.newPasswordTwo\r\n            }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n// Log In\r\n\r\n\r\n                // https://card-manager.herokuapp.com\r\n\r\nexport const sendLogInForm = (userForm) => {\r\n    return dispatch => {\r\n\r\n        let formData = new FormData();\r\n        formData.append('email', userForm.email);\r\n        formData.append('password', userForm.password);\r\n\r\n        //localhost:5000\r\n        \r\n\r\n        fetch('https://card-manager.herokuapp.com/Login', {\r\n            method: 'POST',\r\n            credentials: \"include\",\r\n            body: formData\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                localStorage.setItem('user', result.email);\r\n                dispatch(pushLoginToState());\r\n                dispatch(zeroingForm());\r\n                callForwardingToList();\r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n/*===================================================================================*/\r\n// Registration\r\n\r\nexport const sendRegistrationForm = (userForm) => {\r\n    return dispatch => {\r\n\r\n        let formData = new FormData();\r\n        formData.append('email', userForm.email);\r\n        formData.append('password', userForm.password);\r\n        formData.append('passwordTwo', userForm.passwordTwo);\r\n\r\n\r\n        fetch('https://card-manager.herokuapp.com/Registration', {\r\n            method: 'POST',\r\n            credentials: \"include\",\r\n            body: formData\r\n        })\r\n            .then(res => res.text())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                dispatch(zeroingFormWithoutEmail());\r\n                callForwardingToLogIn();\r\n\r\n            }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n/*===================================================================================*/\r\n// Log out\r\n\r\nexport const logOut = () => {\r\n    return dispatch => {\r\n\r\n\r\n        fetch('https://card-manager.herokuapp.com/Logout', {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.text())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                if (result == 'Succses') {\r\n                    dispatch(zeroingForm());\r\n                    localStorage.removeItem('user');\r\n                    dispatch(removeUserName());\r\n                    callForwardingToLogIn();\r\n                }\r\n                \r\n\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n/*===================================================================================*/\r\n// check a user\r\n\r\nexport const checkAUser = () => {\r\n    return dispatch => {\r\n\r\n\r\n        fetch('https://card-manager.herokuapp.com/HaveAUser', {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                console.log(result);\r\n\r\n                if (result.error == undefined) {\r\n                    localStorage.setItem('user', result.email);\r\n                    dispatch(pushLoginToState());\r\n                    dispatch(zeroingForm());\r\n                    callForwardingToList();\r\n                } else {\r\n                    localStorage.removeItem('user');\r\n                    dispatch(removeUserName());\r\n                    callForwardingToLogIn();\r\n                }\r\n                \r\n\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n}\r\n\r\n\r\n/*===================================================================================*/\r\n\r\n\r\n\r\n\r\nexport const callForwardingToLogIn = () => {\r\n    history.push('/LogIn')\r\n}\r\nexport const callForwardingToRegistration = () => {\r\n    history.push('/Registration')\r\n}\r\n\r\n\r\nconst pushLoginToState = () => {\r\n    return {\r\n        type: 'CHANGE-USER-NAME',\r\n        newName: localStorage.getItem('user')\r\n    }\r\n}\r\nconst removeUserName = () => {\r\n    return {\r\n        type: 'CHANGE-USER-NAME',\r\n        newName: ''\r\n    }\r\n}\r\n\r\nexport const changeEmail = (email) => {\r\n    return {\r\n        type: 'CHANGE-EMAIL',\r\n        newEmail: email\r\n    }\r\n}\r\nexport const changePassword = (password) => {\r\n    return {\r\n        type: 'CHANGE-PASSWORD',\r\n        newPassword: password\r\n    }\r\n}\r\nexport const changePasswordTwo = (passwordTwo) => {\r\n    return {\r\n        type: 'CHANGE-PASSWORD-TWO',\r\n        newPasswordTwo: passwordTwo\r\n    }\r\n}\r\n\r\nexport const zeroingFormWithoutEmail = () => {\r\n    return {\r\n        type: 'CHANGE-FORM-WITHOUT-EMAIL',\r\n        newPassword: '',\r\n        newPasswordTwo: ''\r\n    }\r\n}\r\n\r\nexport const zeroingForm = () => {\r\n    return {\r\n        type: 'CHANGE-FORM',\r\n        newEmail: '',\r\n        newPassword: '',\r\n        newPasswordTwo: ''\r\n    }\r\n}\r\n\r\nexport default userFormReducer;","import { connect } from 'react-redux'\r\nimport NavBar from './NavBar';\r\nimport { getList } from '../../Redux/cardList-reducer';\r\nimport { callForwardingToLogIn, logOut, checkAUser } from '../../Redux/userForm-reducer';\r\nimport { callForwardingToList } from '../../Redux/cardEdit-reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n\r\n        userName: state.userForm.userName\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        haveAUser: () => {\r\n            dispatch(checkAUser());\r\n        },\r\n        getAllCard: () => {\r\n            callForwardingToList();\r\n            dispatch(getList());\r\n        },\r\n        getLogPage: () => {\r\n            callForwardingToLogIn();\r\n        },\r\n        onLogOut: () => {\r\n            dispatch(logOut());\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst NavBarContainer = connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n\r\nexport default NavBarContainer;","import React from 'react'\r\nimport classes from './CardElement.module.css';\r\nimport { Card, Button } from 'react-bootstrap'\r\n\r\nexport default class CardElement extends React.Component {\r\n\r\n    render() {\r\n\r\n        let id = this.props.id;\r\n        let cardTag = this.props.tag;\r\n        let cardDate = this.props.date;\r\n\r\n        let onOpenCard = () => {\r\n            this.props.openThisCard(id);\r\n        }\r\n\r\n        let onDeleteCard = () => {\r\n            this.props.deleteThisCard(id);\r\n        }\r\n\r\n        this.getCardsWithTag = () => {\r\n            this.props.getCardListWithTag(cardTag);\r\n        }\r\n\r\n\r\n        return (\r\n            <Card className=\"mt-3 mr-3 ml-3\" style={{ width: '19rem', height: '20rem', color: 'black' }} key={this.props.id}>\r\n                <Card.Body>\r\n                    <Card.Title >\r\n                        {this.props.title}\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{cardDate}</Card.Subtitle>\r\n                    <Card.Text className={classes.text} >\r\n                        {this.props.content}\r\n                    </Card.Text>\r\n                    <Button onClick={onOpenCard} className=\"mr-3 mb-2\" variant=\"dark\">Open</Button>\r\n                    <Button onClick={onDeleteCard} className=\"mr-3 mb-2\" variant=\"dark\">Delete</Button>\r\n                    {cardTag || cardTag == !undefined ?\r\n                        <Button variant=\"warning\" onClick={this.getCardsWithTag} className={classes.btn} >{cardTag}</Button>\r\n                    :\r\n                        null\r\n                    }\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nexport const TagElement = (props) => {\r\n\r\n    let getCardsWithTag = () => {\r\n        let tag = props.tag;\r\n        props.getCardListWithTag(tag);\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <Button className=\"mr-1 ml-2\" onClick={getCardsWithTag} variant=\"warning\">{props.tag}</Button>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}","import React from 'react'\r\nimport classes from './CardList.module.css';\r\nimport { Row, Col, Button } from 'react-bootstrap'\r\nimport CardElement from './CardElement/CardElement';\r\nimport { TagElement } from './TagElement/TagElement';\r\n\r\nexport default class CardList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getCardList();\r\n    }\r\n\r\n    render() {\r\n\r\n        this.getList = async () => {\r\n            await this.props.getCardList();\r\n            console.log(this.props.cardList);\r\n        }\r\n\r\n        this.newCard = () => {\r\n            this.props.createNewCard();\r\n        }\r\n\r\n        this.getCardListWithTag = (tag) => {\r\n            this.props.getCardsWithTag(tag);\r\n        }\r\n\r\n        \r\n        this.tagElements = this.props.tagList\r\n        .map((e => <TagElement key={Math.random().toString(36)} tag={e} getCardListWithTag={this.getCardListWithTag} /> ))\r\n\r\n        this.cardElements = this.props.cardList\r\n        .map((e => <CardElement key={e._id} title={e.Title} content={e.Content} tag={e.Tag} date={e.Date} id={e._id} getCardListWithTag={this.getCardListWithTag} openThisCard={this.props.openThisCard} deleteThisCard={this.props.deleteThisCard} /> ))\r\n\r\n\r\n        // 'rgb(65, 74, 78)'\r\n\r\n        return (\r\n            <Row>\r\n                <Col  className={classes.Test}>\r\n                    <Row>\r\n                        <Col md className=\"d-flex flex-row justify-content-start align-items-center \" style={{ background: 'rgb(65, 74, 78)', height: '8vh', overflow: 'auto' }}>{this.tagElements}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12} style={{ background: 'rgb(65, 74, 78)', height: '86.5vh', overflow: 'auto', color: 'white' }}>\r\n                            <Button onClick={this.newCard} className=\"mt-3 mb-1 ml-2\">+ New Card</Button>\r\n                            \r\n                            <Row className=\"d-flex flex-row justify-content-around align-items-center \" style={{ overflow: 'hidden' }} >\r\n\r\n                                {this.cardElements}\r\n                                \r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n// <Button onClick={this.getList} className=\"mt-3 mb-1 ml-2\">Update list</Button>","import { connect } from 'react-redux'\r\nimport CardList from './CardList';\r\nimport { getCard, deleteCard, getList, callForwardingToCard, getListWithByTag } from '../../Redux/cardList-reducer';\r\nimport { zeroingCardContent, createHints, thisCreatePage, switchOfEditCard } from '../../Redux/cardEdit-reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n        cardList: state.cardList.cardList,\r\n        tagList: state.cardList.tagList\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        getCardList: () => {\r\n            dispatch(getList());\r\n        },\r\n\r\n        openThisCard: (id) => {\r\n            dispatch(getCard(id));\r\n        },\r\n\r\n        deleteThisCard: (id) => {\r\n            dispatch(deleteCard(id));\r\n        },\r\n\r\n        createNewCard: () => {\r\n            dispatch(zeroingCardContent());\r\n            dispatch(thisCreatePage());\r\n            dispatch(createHints());\r\n            dispatch(switchOfEditCard());\r\n            callForwardingToCard();\r\n        },\r\n\r\n        getCardsWithTag: (tag) => {\r\n            dispatch(getListWithByTag(tag));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst CardListContainer = connect(mapStateToProps, mapDispatchToProps)(CardList);\r\n\r\nexport default CardListContainer;","import React from 'react'\r\nimport classes from './CardEdit.module.css';\r\nimport { Row, Card, FormGroup, FormControl, Button, Form } from 'react-bootstrap';\r\n\r\nexport default class CardEdit extends React.Component {\r\n    render() {\r\n\r\n        let cardTitle = this.props.cardTitle;\r\n        let cardText = this.props.cardText;\r\n        let cardTag = this.props.cardTag;\r\n        let cardDate = this.props.cardDate;\r\n\r\n        let editMode = this.props.editMode;\r\n        let thisCreatePage = this.props.thisCreatePage;\r\n        let cardId = this.props.cardId;\r\n        console.log('This create page? ' + thisCreatePage);\r\n        console.log('Id: ' + cardId);\r\n\r\n\r\n        this.newTitleElement = React.createRef();\r\n        this.onChangeCardTitle = () => {\r\n            let text = this.newTitleElement.current.value;\r\n            this.props.changeCardTitle(text);\r\n        }\r\n        console.log(this.props.cardTitle);\r\n\r\n        this.newTextElement = React.createRef();\r\n        this.onChangeCardText = () => {\r\n            let text = this.newTextElement.current.value;\r\n            this.props.changeCardText(text);\r\n        }\r\n        console.log(this.props.cardText);\r\n\r\n        this.newTagElement = React.createRef();\r\n        this.onChangeCardTag = () => {\r\n            let tag = this.newTagElement.current.value;\r\n            this.props.changeCardTag(tag);\r\n        }\r\n\r\n\r\n        this.editCard = () => {\r\n            console.log('Edit');\r\n            this.props.onEditCard();\r\n        }\r\n        this.saveCard = () => {\r\n            console.log('Save');\r\n            let postFormContent = {cardId, cardTitle, cardText, cardTag}\r\n            this.props.saveThisCardChanges(postFormContent);\r\n        }\r\n        this.deleteCard = () => {\r\n            console.log('Delete');\r\n            this.props.deleteThisCard(cardId);\r\n        }\r\n        this.saveNewCard = () => {\r\n            console.log('Save new card');\r\n            let postFormContent = {cardTitle, cardText, cardTag}\r\n            this.props.createNewCard(postFormContent);\r\n        }\r\n        this.deleteNewCard = () => {\r\n            console.log('Delete new card');\r\n            this.props.deleteNewCard();\r\n        }\r\n\r\n\r\n        return (\r\n            <Row className=\"justify-content-center\" style={{ height: '94.5vh' }}>\r\n\r\n                <Card className=\"mt-4 \" style={{ width: '80%', height: '70%', color: 'black' }}>\r\n                    <Card.Body style={{ overflow: 'auto' }}>\r\n                        {editMode ?\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <FormControl onChange={this.onChangeCardTitle} ref={this.newTitleElement} value={this.props.cardTitle} aria-describedby></FormControl>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        :\r\n                            <Card.Title >\r\n                                {this.props.cardTitle}\r\n                            </Card.Title>\r\n                        }\r\n\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{cardDate}</Card.Subtitle>\r\n                        \r\n                        {editMode ?\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <FormControl className={classes.textForm} size=\"lg\" htmlSize=\"2\" as=\"textarea\" rows=\"3\"  onChange={this.onChangeCardText} ref={this.newTextElement} value={this.props.cardText} aria-describedby></FormControl>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        :\r\n                            <Card.Text>\r\n                                {this.props.cardText}\r\n                            </Card.Text>\r\n                        }\r\n                        {editMode &&\r\n                            <FormControl styles={{ background: '#ffc107', color: '#ffc107' }} onChange={this.onChangeCardTag} ref={this.newTagElement} value={this.props.cardTag} placeholder=\"   Tag\" aria-describedby></FormControl>\r\n                        }\r\n                        \r\n\r\n\r\n                        <Button onClick={this.editCard} className=\"mr-3 mt-3\" variant=\"dark\">Edit</Button>\r\n\r\n                        {thisCreatePage ?\r\n                            <React.Fragment>\r\n                                <Button onClick={this.saveNewCard} className=\"mr-3 mt-3\" variant=\"dark\">Save</Button>\r\n                                <Button onClick={this.deleteNewCard} className=\"mr-3 mt-3\" variant=\"dark\">Delete</Button>\r\n                            </React.Fragment>\r\n                        :\r\n                            <React.Fragment>\r\n                                <Button onClick={this.saveCard} className=\"mr-3 mt-3\" variant=\"dark\">Save</Button>\r\n                                <Button onClick={this.deleteCard} className=\"mr-3 mt-3\" variant=\"dark\">Delete</Button>\r\n                            </React.Fragment>\r\n                        }\r\n                        {!editMode ?\r\n                            <Button onClick={this.editCard} className={classes.button} variant=\"warning\">{cardTag || cardTag == !undefined ? 'Tag: ' + cardTag : '+ Add tag'}</Button>\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n            </Row>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport CardEdit from './CardEdit';\r\nimport { updateNewCardText, updateNewCardTitle, editCard, saveCardChanges, createCard, zeroingCardContent, callForwardingToList, updateNewCardTag } from '../../Redux/cardEdit-reducer';\r\nimport { deleteCard } from '../../Redux/cardList-reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n        cardText: state.cardEdit.cardText,\r\n        cardTitle: state.cardEdit.cardTitle,\r\n        cardTag: state.cardEdit.cardTag,\r\n        cardDate: state.cardEdit.cardDate,\r\n\r\n        editMode: state.cardEdit.editMode,\r\n        thisCreatePage: state.cardEdit.thisCreatePage,\r\n\r\n        cardId: state.cardEdit.cardId\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        changeCardText: (text) => {\r\n            let action = updateNewCardText(text);\r\n            dispatch(action);\r\n        },\r\n        changeCardTitle: (text) => {\r\n            let action = updateNewCardTitle(text);\r\n            dispatch(action);\r\n        },\r\n        changeCardTag: (tag) => {\r\n            let action = updateNewCardTag(tag);\r\n            dispatch(action);\r\n        },\r\n        onEditCard: () => {\r\n            dispatch(editCard());\r\n        },\r\n        saveThisCardChanges: (postFormContent) => {\r\n            dispatch(saveCardChanges(postFormContent));\r\n        },\r\n        deleteThisCard: (cardId) => {\r\n            dispatch(deleteCard(cardId));\r\n        },\r\n        createNewCard: (postFormContent) => {\r\n            dispatch(createCard(postFormContent));\r\n        },\r\n        deleteNewCard: () => {\r\n            dispatch(zeroingCardContent());\r\n            callForwardingToList();\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\nconst CardEditContainer = connect(mapStateToProps, mapDispatchToProps)(CardEdit);\r\n\r\nexport default CardEditContainer;","import React from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\nimport './LogIn.css';\r\n\r\nexport default class LogIn extends React.Component {\r\n    render() {\r\n\r\n\r\n        this.emailFormElement = React.createRef();\r\n        this.passwordFormElement = React.createRef();\r\n        \r\n\r\n        this.changeEmail = () => {\r\n            let email = this.emailFormElement.current.value;\r\n            this.props.changeEmailValue(email);\r\n        }\r\n        this.changePassword = () => {\r\n            let password = this.passwordFormElement.current.value;\r\n            this.props.changePasswordValue(password);\r\n        }\r\n\r\n        this.sendForm = () => {\r\n            let email = this.emailFormElement.current.value;\r\n            let password = this.passwordFormElement.current.value;\r\n            let userForm = {email, password};\r\n            this.props.sendUserForm(userForm);\r\n        }\r\n\r\n        this.getRegistrationPage = () => {\r\n            this.props.getRegPage();\r\n        }\r\n\r\n        //             border border-warning rounded\r\n\r\n\r\n        return (\r\n\r\n            <Col xs={12} md={10} lg={8} xl={6} className=\"m-md-auto\">\r\n                <Form className=\"mt-4 bg-white border-form-LogIn\">\r\n                    <Form.Group  controlId=\"formBasicEmail\" className=\"mt-2\">\r\n                        <Col xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto mt-5\">\r\n                            <Form.Label className=\"ml-2\">Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.changeEmail} ref={this.emailFormElement} value={this.props.email} />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Col xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto\">\r\n                            <Form.Label className=\"ml-2\">Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.changePassword} ref={this.passwordFormElement} value={this.props.password} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Col /* xs={6} */ xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto\">\r\n                    <Button onClick={this.sendForm} variant=\"primary\" className=\"mb-2 mt-1\">\r\n                        Log in\r\n                    </Button>\r\n                    <Button onClick={this.getRegistrationPage} variant=\"warning\" className=\"ml-sm-2 mb-2 mt-1\">\r\n                        Registration\r\n                    </Button>\r\n                    </Col>\r\n                </Form>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport LogIn from './LogIn';\r\nimport { sendLogInForm, callForwardingToRegistration, changeEmail, changePassword } from '../../Redux/userForm-reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n\r\n        email: state.userForm.email,\r\n        password: state.userForm.password\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        sendUserForm: (userForm) => {\r\n            dispatch(sendLogInForm(userForm));\r\n        },\r\n        getRegPage: () => {\r\n            callForwardingToRegistration();\r\n        },\r\n        changeEmailValue: (email) => {\r\n            dispatch(changeEmail(email));\r\n        },\r\n        changePasswordValue: (password) => {\r\n            dispatch(changePassword(password));\r\n        },\r\n\r\n    }\r\n}\r\n\r\nconst LogInContainer = connect(mapStateToProps, mapDispatchToProps)(LogIn);\r\n\r\nexport default LogInContainer;","import React from 'react'\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\n\r\nexport default class Registration extends React.Component {\r\n    render() {\r\n\r\n        this.emailFormElement = React.createRef();\r\n        this.passwordFormElement = React.createRef();\r\n        this.passwordTwoFormElement = React.createRef();\r\n\r\n\r\n        this.changeEmail = () => {\r\n            let email = this.emailFormElement.current.value;\r\n            this.props.changeEmailValue(email);\r\n        }\r\n        this.changePassword = () => {\r\n            let password = this.passwordFormElement.current.value;\r\n            this.props.changePasswordValue(password);\r\n        }\r\n        this.changePasswordTwo = () => {\r\n            let passwordTwo = this.passwordTwoFormElement.current.value;\r\n            this.props.changePasswordTwolValue(passwordTwo);\r\n        }\r\n\r\n\r\n\r\n        this.sendForm = () => {\r\n            let email = this.emailFormElement.current.value;\r\n            let password = this.passwordFormElement.current.value;\r\n            let passwordTwo = this.passwordTwoFormElement.current.value;\r\n            let userForm = {email, password, passwordTwo};\r\n            this.props.sendUserForm(userForm);\r\n        }\r\n\r\n        return (\r\n\r\n            <Col xs={12} md={10} lg={8} xl={6} className=\"m-md-auto\">\r\n                <Form className=\"mt-4 bg-white border-form-LogIn\">\r\n                    <Form.Group sm={2} controlId=\"formBasicEmail\" className=\"mt-2\">\r\n                        <Col xs={12} sm={10} md={9} lg={8} xl={6}  className=\"m-auto mt-5\">\r\n                            <Form.Label className=\"ml-2\">Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.changeEmail} value={this.props.email} ref={this.emailFormElement} />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Col xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto\">\r\n                            <Form.Label className=\"ml-2\">Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.changePassword} value={this.props.password} ref={this.passwordFormElement} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Col xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto\">\r\n                            <Form.Label className=\"ml-2\"> Repeat password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Repeat password\" onChange={this.changePasswordTwo} value={this.props.passwordTwo} ref={this.passwordTwoFormElement} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                Very secret\r\n                            </Form.Text>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Col xs={12} sm={10} md={9} lg={8} xl={6} className=\"m-auto\">\r\n                    <Button onClick={this.sendForm} variant=\"primary\" className=\"mb-2 mt-1\">\r\n                        Registration\r\n                    </Button>\r\n                    </Col>\r\n                </Form>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport Registration from './Registration';\r\nimport { sendRegistrationForm, changeEmail, changePassword, changePasswordTwo } from '../../../Redux/userForm-reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n\r\n        email: state.userForm.email,\r\n        password: state.userForm.password,\r\n        passwordTwo: state.userForm.passwordTwo\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        sendUserForm: (userForm) => {\r\n            dispatch(sendRegistrationForm(userForm));\r\n        },\r\n        changeEmailValue: (email) => {\r\n            dispatch(changeEmail(email));\r\n        },\r\n        changePasswordValue: (password) => {\r\n            dispatch(changePassword(password));\r\n        },\r\n        changePasswordTwolValue: (passwordTwo) => {\r\n            dispatch(changePasswordTwo(passwordTwo));\r\n        },\r\n\r\n    }\r\n}\r\n\r\nconst RegistrationContainer = connect(mapStateToProps, mapDispatchToProps)(Registration);\r\n\r\nexport default RegistrationContainer;","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Route, Redirect } from 'react-router-dom';\nimport NavBarContainer from './Components/NavBar/NavBarContainer';\nimport CardListContainer from './Components/CardsList/CardListContainer';\nimport CardEditContainer from './Components/Card/CardEditContainer';\nimport LogInContainer from './Components/UserForm/LogInContainer';\nimport RegistrationContainer from './Components/UserForm/Registration/RegistrationContainer';\n\n\n\nfunction App() {\n  return (\n\n    <div className=\"Wripper\">\n      <NavBarContainer />\n      <div className=\"h-1000\"></div>\n      <Container fluid>\n        <Row fluid>\n          <Col>\n            <Route  exact path='/LogIn' component={LogInContainer} />\n            <Route path='/Registration' component={RegistrationContainer} />\n            <Route path='/list' component={CardListContainer} />\n            <Route path='/card' component={CardEditContainer} />\n            <Redirect from='/' to='/LogIn' />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n\n\n/*\n\n<div className=\"Wripper\"> \n      <NavBarContainer />\n      <div className=\"h-1000\"></div>\n      <Container fluid>\n        <Row fluid>\n          <Col>\n          <div>\n              <Route exact path='/' component={CardListContainer} />\n              <Route path='/card' component={UserFormContainer} />\n          </div>\n          </Col>\n\n          </Row>\n          </Container>\n        </div>\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n<Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\" >\n        <Container>\n          <NavbarToggle aria-controls=\"responsive-navbar-nav\" />\n          <NavbarCollapse id=\"responsive-navbar-nav\" >\n            <Nav className=\"mr-auto\">\n              \n              </Nav>\n              <Form inline>\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                <Button variant=\"outline-info\">Search</Button>\n              </Form>\n            </NavbarCollapse>\n          </Container>\n        </Navbar>\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport userFormReducer from './userForm-reducer';\r\nimport cardEditReducer from \"./cardEdit-reducer\";\r\nimport cardListReducer from \"./cardList-reducer\";\r\n\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    userForm: userFormReducer,\r\n    cardEdit: cardEditReducer,\r\n    cardList: cardListReducer\r\n});\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\n\r\n\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport history from './history';\nimport store from './Redux/redux';\nimport { Router } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n/*\n\n<Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>\n\n*/"],"sourceRoot":""}